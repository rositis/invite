<?php

/**
 * @file
 * Contains install and update functions for Invite.
 */

/**
 * Implements hook_schema().
 */
function invite_schema() {
  $schema = array();

  $schema['invite'] = array(
    'description' => 'The base table for invites.',
    'fields' => array(
      'iid' => array(
        'description' => 'The primary identifier for the invite.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'reg_code' => array(
        'description' => 'Stores the issued registration code.',
        'type' => 'varchar',
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'The type (bundle) of this invite.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'ID of Drupal user creator.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'invitee' => array(
        'description' => 'Drupal uid of the invitee upon registration.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'Invitation status.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the invite was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'expiry' => array(
        'description' => 'The Unix timestamp when the invite will expire.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'joined' => array(
        'description' => 'Will be filled with the time the invite was accepted upon registration.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'canceled' => array(
        'description' => 'The Unix timestamp when the invite has been withdrawn.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'description' => 'Stores auxiliary data.',
        'type' => 'text',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('iid'),
    'indexes' => array(
      'invitee' => array('invitee'),
    ),
    'foreign keys' => array(
      'user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['invite_type'] = array(
    'description' => 'Stores information about all defined invite types.',
    'fields' => array(
      'itid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique invite type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
      'data' => array(
        'description' => 'Stores auxiliary data.',
        'type' => 'text',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('itid'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  $schema['invite_sending_controller'] = array(
    'fields' => array(
      'type' => array(
        'description' => 'The machine-readable name of Invite Type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'module' => array(
        'description' => 'Module, which implements this controller.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The machine-readable name of this sending controller.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
    ),
    'unique keys' => array(
      'invite_type_controller' => array('type', 'name'),
    ),
    'foreign keys' => array(
      'invite_type' => array(
        'table' => 'invite_type',
        'columns' => array('type' => 'type'),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function invite_install() {
  // TODO: Update URLs to the Backdrop version once approved.
  backdrop_set_message(t('Thank you for installing the <a href="@url_invite" target="blank">Invite</a>.', array(
    '@url_invite' => 'https://www.drupal.org/project/invite',
  )));

  // Notify the user they may want to install token.
  if (!module_exists('token')) {
    $t = get_t();
    backdrop_set_message($t('If you install the <a href="!url" target="blank">Token</a>, Invite will be able to use token patterns.', array('!url' => 'http://drupal.org/project/token')));
  }
}
/**
 * Move Invite settings from variables to config.
 */
function invite_update_1000() {
  // Migrate variables to config.
  $config = config('invite.settings');
  $config->set('invite_default_expiry_time', update_variable_get('invite_default_expiry_time', 30));
  $config->set('invite_message_editable', update_variable_get('invite_message_editable', ''));
  $config->set('invite_default_mail_subject', update_variable_get('invite_default_mail_subject', ''));
  $config->set('invite_default_mail_body', update_variable_get('invite_default_mail_body', ''));
  $config->set('invite_default_replace_tokens', update_variable_get('invite_default_replace_tokens', ''));
  $config->set('invite_use_users_email_replyto', update_variable_get('invite_use_users_email_replyto', ''));
  $config->set('invite_manual_from', update_variable_get('invite_manual_from', ''));
  $config->set('invite_use_users_email', update_variable_get('invite_use_users_email', ''));
  $config->set('invite_version_updated', update_variable_get('invite_version_updated', 1));
  $config->set('invite_require_approval', update_variable_get('invite_require_approval', 0));
  $config->save();

  // Delete variables.
  update_variable_del('invite_default_expiry_time');
  update_variable_del('invite_message_editable');
  update_variable_del('invite_default_mail_subject');
  update_variable_del('invite_default_mail_body');
  update_variable_del('invite_default_replace_tokens');
  update_variable_del('invite_use_users_email_replyto');
  update_variable_del('invite_manual_from');
  update_variable_del('invite_use_users_email');
  update_variable_del('invite_version_updated');
  update_variable_del('invite_require_approval');
}

/**
 * Implements hook_update_last_removed().
 */
function invite_update_last_removed() {
  return 7401;
}
